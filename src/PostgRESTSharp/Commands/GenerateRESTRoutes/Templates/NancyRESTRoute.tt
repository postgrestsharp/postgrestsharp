<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="PostgRESTSharp.Commands.GenerateRESTRoutes" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="PostgRESTSharp.REST" #>
using Nancy;
using Nancy.Extensions;
using Nancy.ModelBinding;
using Nancy.Security;
using RestSharp;
using RestSharp.Authenticators;
using Newtonsoft.Json;
using System.Collections.Generic;
using System.Linq;
using PostgRESTSharp.Shared;
using <#=ModelNamespace#>;
using <#=ExtensionNamespace#>;

namespace <#=Namespace#> 
{
    public class <#=ClassName#> : NancyModule
    {
    	public <#=ClassName#>(IApiClient client, IPostgRESTUrlConfigurationProvider postgRESTConfigProvider, IRestLinkBuilder linkBuilder) 
    	{
			
			//Authentication claims
<# if (Resource.AccessClaims.Count() > 0) { #>
			this.RequiresDatabaseRoles(new[] { 
<# string prefix = ""; #>
<#foreach(var claim in Resource.AccessClaims){#>
				<#=prefix#> "<#=claim#>"
	<# prefix = ","; #>
<#}#>		});
<#}#>

<#foreach(var method in Resource.Methods){#>
			<#=GetVerbString(method.Verb)#>["/<#=Resource.Uri + GetParameters(method.URIParameters)#>", true] = async (ctx, ct) =>
    		{
<#if (ErrorHandlingMode.Equals(ErrorHandlingModes.STANDARD)){#>
                throw new NotImplementedException("TODO: implement try/catches around modules");
<#}else{#>
<#switch(method.Verb){#>
<#case RESTVerbEnum.GET:#>
<#if(method.VerbDetail == RESTVerbDetailEnum.Collection){#>
				
				var authenticator = new HttpBasicAuthenticator(Context.CurrentUser.GetDatabaseUser(), "");
                var request = new RestRequest("<#=Resource.PostgRESTUri#>");
    		    request.AddQueryParameter("order", "<#=Resource.KeyName#>.asc");
                var models = client.Execute<List<<#=GETModelName#>>>(request, postgRESTConfigProvider.Url, Context, authenticator);
                
				foreach(var model in models)
				{
					Url url = new Url();
					url.HostName = this.Request.Url.HostName;
					url.Port = this.Request.Url.Port;
					url.BasePath = this.Request.Url.Path;
					url.Path = "/" + model.GetPrimaryKeyValue();
					model.BuildLinks(linkBuilder, url);
				}

				return models;
<#}else{#>
    			
				var authenticator = new HttpBasicAuthenticator(Context.CurrentUser.GetDatabaseUser(), "");
                var request = new RestRequest("<#=Resource.PostgRESTUri#>");
                request.AddQueryParameter("id", string.Format("eq.{0}", ctx.id));
                var models = client.Execute<List<<#=GETModelName#>>>(request, postgRESTConfigProvider.Url, Context, authenticator);

				var model = models.FirstOrDefault();
    		    if (model != null)
    		    {
                    model.BuildLinks(linkBuilder, this.Request.Url);
    		    }
				return model;
<#}#>
<#break;#>
<#case RESTVerbEnum.POST:#>
				var model = this.Request.Body.AsString();
    			var client = new HttpClient();
				string route = postgRESTConfigProvider.Url + "<#=Resource.PostgRESTUri#>";
    			var res = await client.PostAsync(route, new StringContent(model));
    			var pkVal = locationHeaderParser.ParseLocationHeader<int>("id", res.Headers.Location);
    			var responseModel = new <#=POSTResponseModelName#>(pkVal);
    			responseModel.BuildSelfLink(linkBuilder, this.Request.Url);
    			return responseModel;
<#break;#>
<#default:#>
<#break;#>
<#}#>
<#}#>
    		};
<#}#>
		
    	}

    }

}