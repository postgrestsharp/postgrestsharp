<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="PostgRESTSharp.Commands.GenerateRESTRoutes" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="PostgRESTSharp.REST" #>
using System;
using Nancy;
using Nancy.Extensions;
using Nancy.ModelBinding;
using Nancy.Security;
using RestSharp;
using RestSharp.Authenticators;
using Newtonsoft.Json;
using System.Collections.Generic;
using System.Linq;
using PostgRESTSharp.Shared;
using <#=ModelNamespace#>;

namespace <#=Namespace#> 
{
    public class <#=ClassName#> : NancyModule, IGeneratedModule
    {
    	public <#=ClassName#>(IApiClient client, IAuthenticatorFactory authenticatorFactory, IPostgRESTUrlConfigurationProvider postgRESTConfigProvider, 
				IRestLinkBuilder linkBuilder, IRoleEnforcer roleEnforcer, IPostgRESTUserProvider postgRestUserProvider, IRequestTransformer requestTransformer,
                ILocationHeaderParser locationHeaderParser
                )
    	{
<# if (Resource.AccessClaims.Count() > 0) { #>
			roleEnforcer.EnsureUserBelongsToRoles(this, new[] { 
<# string prefix = ""; #>
<#foreach(var claim in Resource.AccessClaims){#>
				<#=prefix#> "<#=claim#>"
	<# prefix = ","; #>
<#}#>		});
<#}#>

<#foreach(var method in Resource.Methods){#>
			<#=GetVerbString(method.Verb)#>["/<#=Resource.Uri + GetParameters(method.URIParameters)#>", true] = async (ctx, ct) =>
    		{
<#if (ErrorHandlingMode.Equals(ErrorHandlingModes.STANDARD)){#>
                throw new NotImplementedException("TODO: implement try/catches around modules");
<#}else{#>
<#switch(method.Verb){#>
<#case RESTVerbEnum.GET:#>
<#if(method.VerbDetail == RESTVerbDetailEnum.Collection){#>
				var query = requestTransformer.EmptyQuery();
				query.Add(new KeyValuePair<string, string>("order", "<#=Resource.KeyName#>.asc")); //default
				var headers = requestTransformer.EmptyHeaders();

                requestTransformer.Transform(Request, query, headers);

                var authenticator = authenticatorFactory.GetPostgrestAuthenticator(postgRestUserProvider.GetDatabaseUser(this), "");
                var restResponse = client.Execute("<#=Resource.PostgRESTUri#>", postgRESTConfigProvider.Url, authenticator, query, headers);
                var models = JsonConvert.DeserializeObject<List<<#=GETModelName#>>>(restResponse.Content);
				foreach(var model in models)
				{
					Url url = new Url();
					url.HostName = this.Request.Url.HostName;
					url.Port = this.Request.Url.Port;
					url.BasePath = this.Request.Url.Path;
					url.Path = "/" + model.GetPrimaryKeyValue();
					model.BuildLinks(linkBuilder, url);
				}

                var response = this.Negotiate.WithModel(models);

                var contentRangeHeader = restResponse.Headers.FirstOrDefault(a => a.Name.Equals("Content-Range", StringComparison.OrdinalIgnoreCase));
                if (contentRangeHeader != null)
                {
                    response.WithHeader("Content-Range", contentRangeHeader.Value.ToString());
                }

                if (restResponse.StatusCode == System.Net.HttpStatusCode.PartialContent)
                {
                    response.WithStatusCode(HttpStatusCode.PartialContent);
                }

                return response;
<#}else{#>
				var query = requestTransformer.EmptyQuery();
                var headers = requestTransformer.EmptyHeaders();
				query.Add(new KeyValuePair<string, string>("<#=Resource.KeyName#>", string.Format("eq.{0}", ctx.id))); //default

                requestTransformer.Transform(Request, query, headers);

				var authenticator = authenticatorFactory.GetPostgrestAuthenticator(postgRestUserProvider.GetDatabaseUser(this), "");
                var models = client.ExecuteGet<List<<#=GETModelName#>>>("<#=Resource.PostgRESTUri#>", postgRESTConfigProvider.Url, query, headers, authenticator);
				var model = models.FirstOrDefault();
    		    if (model != null)
    		    {
                    model.BuildLinks(linkBuilder, this.Request.Url);
    		    }
				return model;
<#}#>
<#break;#>
<#case RESTVerbEnum.POST:#>
				var query = requestTransformer.EmptyQuery();
                var headers = requestTransformer.EmptyHeaders();

                requestTransformer.Transform(Request, query, headers);

				var model = this.Request.Body.AsString();
                var authenticator = authenticatorFactory.GetPostgrestAuthenticator(postgRestUserProvider.GetDatabaseUser(this), "");
                var response = client.ExecutePost("<#=Resource.PostgRESTUri#>", postgRESTConfigProvider.Url, model, query, headers, authenticator);
                var locationHeader = response.Headers.First(a => a.Name.Equals("Location", StringComparison.OrdinalIgnoreCase));
	            var primaryKeyValue = locationHeaderParser.ParseLocationHeader<int>("<#=Resource.KeyName#>", new Uri((string)locationHeader.Value));
                var responseModel = new <#=POSTResponseModelName#>(primaryKeyValue);
    		    responseModel.BuildSelfLink(linkBuilder, this.Request.Url);
    			return responseModel;
<#break;#>
<#default:#>
<#break;#>
<#}#>
<#}#>
    		};
<#}#>
		
    	}

    }

}