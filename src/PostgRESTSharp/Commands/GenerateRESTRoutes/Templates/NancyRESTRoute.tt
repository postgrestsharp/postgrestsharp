<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="PostgRESTSharp.REST" #>
using Nancy;
using Nancy.Extensions;
using Nancy.ModelBinding;
using System.Net.Http;
using Newtonsoft.Json;
using System.Collections.Generic;
using System.Linq;
using PostgRESTSharp.Shared;
using <#=ModelNamespace#>;

namespace <#=Namespace#> 
{
    public class <#=ClassName#> : NancyModule
    {
    	public <#=ClassName#>(IRestLinkBuilder linkBuilder, ILocationHeaderParser locationHeaderParser, IPostgRESTUrlConfigurationProvider postgRESTConfigProvider, IRestClient restClient, IRestRequest restRequest) 
    	{
<#foreach(var method in Resource.Methods){#>
			<#=GetVerbString(method.Verb)#>["/<#=Resource.Uri + GetParameters(method.URIParameters)#>", true] = async (ctx, ct) =>
    		{
<#switch(method.Verb){#>
<#case RESTVerbEnum.GET:#>
<#if(method.VerbDetail == RESTVerbDetailEnum.Collection){#>
				restClient.BaseUrl = new Uri("http://" + postgRESTConfigProvider.Url);
				restRequest.Resource = "/<#=Resource.PostgRESTUri#>?order=<#=Resource.KeyName#>.asc";
				var response = restClient.Execute(restRequest);
				var models = JsonConvert.DeserializeObject<List<<#=GETModelName#>>>(response.Content);
				foreach(var model in models)
				{
					var url = new Url();
					url.HostName = this.Request.Url.HostName;
					url.Port = this.Request.Url.Port;
					url.BasePath = this.Request.Url.Path;
					url.Path = "/" + model.GetPrimaryKeyValue();
					model.BuildLinks(linkBuilder, url);
				}
				return models;
<#}else{#>
				restClient.BaseUrl = new Uri("http://" + postgRESTConfigProvider.Url);
				restRequest.Resource = string.Format("/<#=Resource.PostgRESTUri#>?<#=method.URIParameters.First().Name#>=eq.{0}", ctx.<#=method.URIParameters.First().Name#>);
				var response = restClient.Execute(restRequest);
    			var models = JsonConvert.DeserializeObject<List<<#=GETModelName#>>>(response.Content);
				var model = models.First();
				model.BuildLinks(linkBuilder, this.Request.Url);
				return model;
<#}#>
<#break;#>
<#case RESTVerbEnum.POST:#>
				var model = this.Request.Body.AsString();
				restClient.BaseUrl = "http://" + postgRESTConfigProvider.Url;
    			restRequest.Resource = "/<#=Resource.PostgRESTUri#>";
				restRequest.Method = Method.POST;
				restRequest.AddJsonBody(model);
				var response = restClient.Execute(restRequest);
				var locationHeader = response.Headers.First(a => a.Name.Equals("Location", StringComparison.OrdinalIgnoreCase));
				var primaryKeyValue = locationHeaderParser.ParseLocationHeader<int>("id", res.Headers.Location);
    			var responseModel = new <#=POSTResponseModelName#>(primaryKeyValue);
    			responseModel.BuildSelfLink(linkBuilder, this.Request.Url);
    			return responseModel;
<#break;#>
<#default:#>
<#break;#>
<#}#>
    		};
<#}#>
    	}
    }
}