<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
using System;
using PostgRESTSharp.Shared;
using Nancy;

namespace <#=Namespace#> 
{
	// GET Model
	public class <#=MetaModel.ModelName#>GETModel
	{
		public <#=MetaModel.ModelName#>GETModel(<#=GetConstructorArgs(RESTModelTypeEnum.Get)#>)
		{
			this._links = new RestLinks();
<#foreach(var assignment in GetConstructorAssignments(RESTModelTypeEnum.Get)) {#>
			<#=assignment#>
<#}#>		
		}

		public RestLinks _links {get; protected set; }
<#foreach(var property in GetProperties(RESTModelTypeEnum.Get)) {#>
		<#=property#>
<#}#>

		public object GetPrimaryKeyValue()
		{
			return this.<#=GetPrimaryKeyColumnName()#>;
		}

		public void BuildLinks(IRestLinkBuilder linkBuilder, Url currentUrl)
		{
			linkBuilder.AddSelfLink(this._links, currentUrl);
<#foreach(var relation in GetRelations()){#>
<#if(relation.Direction == RelationDirectionEnum.Forward) {#>
			linkBuilder.AddRootLink(this._links, currentUrl, "<#=GetRelationUrl(relation)#>", "<#=GetRelationName(relation)#>", this.<#=relation.RelationColumn.ColumnName#>.ToString());
<#}else{#>

<#}#>
<#}#>
		}
	}

<#if(!IsReadOnly){#>
	// POST Model
	public class <#=MetaModel.ModelName#>POSTModel
	{
		public <#=MetaModel.ModelName#>POSTModel(<#=GetConstructorArgs(RESTModelTypeEnum.Post)#>)
		{
<#foreach(var assignment in GetConstructorAssignments(RESTModelTypeEnum.Post)) {#>
			<#=assignment#>
<#}#>	
		}

<#foreach(var property in GetProperties(RESTModelTypeEnum.Post)) {#>
		<#=property#>
<#}#>
	}

	// POST Response Model
	public class <#=MetaModel.ModelName#>POSTResponseModel
	{
		public <#=MetaModel.ModelName#>POSTResponseModel(<#=GetConstructorArgs(RESTModelTypeEnum.PostResponse)#>)
		{
			this._links = new RestLinks();
<#foreach(var assignment in GetConstructorAssignments(RESTModelTypeEnum.PostResponse)) {#>
			<#=assignment#>
<#}#>	
		}

		public RestLinks _links {get; protected set; }
<#foreach(var property in GetProperties(RESTModelTypeEnum.PostResponse)) {#>
		<#=property#>
<#}#>

		public void BuildSelfLink(IRestLinkBuilder linkBuilder, Url currentUrl)
		{
			linkBuilder.AddSelfLink(this._links, currentUrl);
		}
	} 
<#}#>
}

